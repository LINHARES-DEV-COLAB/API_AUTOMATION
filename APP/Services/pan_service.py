import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path
import re
import logging
from typing import List, Optional
from dataclasses import dataclass
import oracledb
import os

logger = logging.getLogger(__name__)

@dataclass
class ResultadoPan:
    titulo: str
    duplicata: str
    valor: float
    
    def to_dict(self):
        return {
            "TITULO": self.titulo,
            "DUPLICATA": self.duplicata,
            "VALOR": f"{self.valor:.2f}".replace('.', ',')
        }

class PanService:
    def __init__(self):
        self.base_dir_rede = r"\\172.17.67.14\Ares Motos\controladoria\financeiro\06.CONTAS A RECEBER\11.RELAT√ìRIOS BANCO PAN"
    
    def processar_extrato(self, caminho_arquivo: str, data_param: str = None) -> List[ResultadoPan]:

        try:
            print(f"\n" + "="*60)
            print("üîç INICIANDO PROCESSAMENTO DO EXTRATO PAN")
            if data_param:
                print(f"üìÖ DATA ENVIADA PELO USU√ÅRIO: {data_param}")
            print("="*60)
            
            # 1. Upload e leitura do arquivo
            df_extrato = self._ler_extrato_ita√∫(caminho_arquivo)
            
            # 2. Filtragem de lan√ßamentos relevantes
            valores_pan = self._filtrar_lancamentos_pan(df_extrato)
            
            if not valores_pan:
                print("‚ùå Nenhum lan√ßamento PAN encontrado no extrato")
                return []
            
            print(f"‚úÖ Valores PAN encontrados: {valores_pan}")
            
            # 3. Busca em diret√≥rio de rede
            resultados = []
                
            for valor in valores_pan:
                print(f"\nüí∞ PROCESSANDO VALOR: R$ {valor:,.2f}")
                
                # Buscar o arquivo correspondente ao valor (PASSANDO A DATA)
                arquivo_encontrado = self._buscar_arquivo_por_valor(valor, data_param)
                
                if arquivo_encontrado:
                    # 4. Extra√ß√£o de informa√ß√µes do relat√≥rio
                    chassi = self._extrair_chassi_do_relatorio(arquivo_encontrado, valor)
                    
                    if chassi:
                        print(f"‚úÖ Chassi encontrado: {chassi}")
                        # Consulta no banco de dados
                        resultado_banco = self._consultar_banco_dados(chassi, valor)
                        
                        if resultado_banco:
                            resultados.append(resultado_banco)
                            print(f"‚úÖ‚úÖ‚úÖ VALOR PROCESSADO COM SUCESSO: R$ {valor:,.2f}")
                            print(f"   üìù Dados: T√≠tulo {resultado_banco.titulo}, Duplicata {resultado_banco.duplicata}")
                        else:
                            print(f"‚ö†Ô∏è  Dados n√£o encontrados no banco para chassi {chassi}")
                    else:
                        print(f"‚ö†Ô∏è  Chassi n√£o encontrado no relat√≥rio")
                else:
                    print(f"‚ùå Arquivo n√£o encontrado para o valor R$ {valor:,.2f}")
            
            # DEBUG FINAL
            print(f"\n" + "="*60)
            print("üîç DEBUG FINAL - TODOS OS RESULTADOS COLETADOS")
            print("="*60)
            print(f"üìä Total de valores PAN no extrato: {len(valores_pan)}")
            print(f"üìä Total de resultados processados: {len(resultados)}")
            
            for i, resultado in enumerate(resultados):
                print(f"   {i+1}. T√≠tulo: {resultado.titulo}, Duplicata: {resultado.duplicata}, Valor: R$ {resultado.valor:,.2f}")
            
            print(f"üìä RESULTADO FINAL: {len(resultados)} registros processados")
            return resultados
                
        except Exception as e:
            print(f"‚ùå ERRO NO PROCESSAMENTO: {e}")
            raise
    
    def _ler_extrato_ita√∫(self, caminho_arquivo: str) -> pd.DataFrame:
        """
        L√™ o arquivo de extrato Ita√∫ a partir da linha 10
        """
        try:
            print(f"üìÅ Lendo arquivo: {caminho_arquivo}")
            
            # L√™ a partir da linha 10 (√≠ndice 9)
            df = pd.read_excel(caminho_arquivo, header=9)
            
            # Remove linhas totalmente vazias
            df = df.dropna(how='all')
            
            print(f"‚úÖ Arquivo lido: {len(df)} linhas")
            return df
            
        except Exception as e:
            print(f"‚ùå Erro na leitura do extrato: {e}")
            raise
    
    def _filtrar_lancamentos_pan(self, df_extrato: pd.DataFrame) -> List[float]:
        """
        Filtra linhas onde 'Lan√ßamento' cont√©m 'Pan' e extrai os valores
        """
        try:
            # Encontra a coluna de lan√ßamento
            col_lancamento = None
            for col in df_extrato.columns:
                col_lower = str(col).lower()
                if any(termo in col_lower for termo in ['lan√ßamento', 'lancamento', 'descri√ß√£o', 'descricao']):
                    col_lancamento = col
                    break
            
            if col_lancamento is None:
                col_lancamento = df_extrato.columns[1]
            
            # Encontra a coluna de valor
            col_valor = None
            for col in df_extrato.columns:
                col_lower = str(col).lower()
                if any(termo in col_lower for termo in ['valor', 'vlr', 'valor (r$)']):
                    col_valor = col
                    break
            
            if col_valor is None:
                col_valor = df_extrato.columns[-1]
            
            # Filtra linhas com 'Pan' no lan√ßamento
            mask_pan = df_extrato[col_lancamento].astype(str).str.contains('pan', case=False, na=False)
            df_pan = df_extrato[mask_pan]
            
            print(f"üìä Lan√ßamentos PAN encontrados: {len(df_pan)}")
            
            # Converte valores para float
            valores = []
            for valor in df_pan[col_valor]:
                try:
                    valor_float = self._converter_valor_para_float(valor)
                    if valor_float is not None:
                        valores.append(round(valor_float, 2))
                except (ValueError, TypeError):
                    continue
            
            # Remove duplicatas e retorna
            valores_unicos = list(set(valores))
            return valores_unicos
            
        except Exception as e:
            print(f"‚ùå Erro no filtro de lan√ßamentos PAN: {e}")
            return []
    
    def _converter_valor_para_float(self, valor) -> Optional[float]:

        if pd.isna(valor):
            return None
        
        if isinstance(valor, (int, float)):
            return float(valor)
        
        try:
            valor_str = str(valor).strip()
            
            # Se j√° est√° vazio, retorna None
            if not valor_str or valor_str.lower() in ['nan', 'none', 'nat']:
                return None
            
            # Remove caracteres n√£o num√©ricos (exceto ponto, v√≠rgula e sinal)
            valor_str = re.sub(r'[^\d,\-\.]', '', valor_str)
            
            # Se ficou vazio ap√≥s limpeza, retorna None
            if not valor_str:
                return None
            
            # Detecta formato brasileiro vs americano
            if '.' in valor_str and ',' in valor_str:
                # Formato brasileiro: 1.234,56 - remove pontos, substitui v√≠rgula
                # Verifica se a v√≠rgula √© o separador decimal (tem 2 casas depois)
                parts = valor_str.split(',')
                if len(parts) == 2 and len(parts[1]) <= 2:
                    valor_str = valor_str.replace('.', '').replace(',', '.')
                else:
                    # V√≠rgula como separador de milhares
                    valor_str = valor_str.replace(',', '')
            elif ',' in valor_str:
                # S√≥ tem v√≠rgula - verifica se √© decimal
                parts = valor_str.split(',')
                if len(parts) == 2 and len(parts[1]) <= 2:
                    valor_str = valor_str.replace(',', '.')  # v√≠rgula decimal
                else:
                    valor_str = valor_str.replace(',', '')   # v√≠rgula como milhares
            
            # Converte para float
            return float(valor_str)
        except Exception as e:
            # print(f"      üí• Erro na convers√£o de '{valor}': {e}")
            return None
        
    def _buscar_arquivo_por_valor(self, valor: float, data_param: str = None) -> Optional[Path]:

        datas_busca = self._obter_datas_para_busca(data_param)
        
        print(f"   üîç Buscando arquivo para R$ {valor:,.2f}")
        print(f"   üìÖ Datas: {datas_busca}")
        
        for data_str in datas_busca:
            pasta_data = Path(self.base_dir_rede) / data_str
            
            if not pasta_data.exists():
                print(f"   ‚ùå Pasta n√£o existe: {data_str}")
                continue
            
            print(f"   üìÇ Verificando pasta: {data_str}")
            
            # Busca arquivos Excel na pasta
            arquivos = list(pasta_data.glob("*.xlsx")) + list(pasta_data.glob("*.xls"))
            arquivos = [arq for arq in arquivos if not arq.name.startswith('~$')]
            
            print(f"   üìÑ Arquivos encontrados: {len(arquivos)}")
            
            for arquivo in arquivos:
                print(f"      üîé Analisando: {arquivo.name}")
                
                # Verifica se o valor est√° no nome do arquivo
                if self._valor_no_nome_arquivo(arquivo, valor):
                    print(f"      ‚úÖ ENCONTRADO no nome do arquivo!")
                    return arquivo
                
                # Ou verifica se o valor est√° no conte√∫do do arquivo
                if self._valor_no_conteudo_arquivo(arquivo, valor):
                    print(f"      ‚úÖ ENCONTRADO no conte√∫do do arquivo!")
                    return arquivo
                
                print(f"      ‚ùå Valor n√£o encontrado em {arquivo.name}")
            
            print(f"   ‚ùå Nenhum arquivo encontrado na data {data_str}")
        
        print(f"   ‚ùå‚ùå‚ùå NENHUM ARQUIVO ENCONTRADO PARA R$ {valor:,.2f}")
        return None
        
    def _obter_datas_para_busca(self, data_param: str = None) -> List[str]:

        if data_param:
            try:
                data_principal = datetime.strptime(data_param, "%d-%m-%Y")
                datas = [data_principal.strftime("%d-%m-%Y")]
                
                # Adiciona o dia ANTERIOR (para casos em que o pagamento chegou antes)
                dia_anterior = data_principal - timedelta(days=1)
                datas.append(dia_anterior.strftime("%d-%m-%Y"))
                
                # Adiciona o dia SEGUINTE (para casos em que o pagamento chegou depois)
                dia_seguinte = data_principal + timedelta(days=1)
                datas.append(dia_seguinte.strftime("%d-%m-%Y"))
                
                # Se a data principal for sexta-feira, adiciona s√°bado e segunda
                if data_principal.weekday() == 4:  # 4 = sexta
                    sabado = data_principal + timedelta(days=1)
                    segunda = data_principal + timedelta(days=3)
                    datas.extend([sabado.strftime("%d-%m-%Y"), segunda.strftime("%d-%m-%Y")])
                
                print(f"   üìÖ DATAS EXPANDIDAS: {datas}")
                return datas
                
            except ValueError as e:
                print(f"   ‚ö†Ô∏è Data inv√°lida '{data_param}', usando datas autom√°ticas")
        
        # Comportamento padr√£o (quando n√£o h√° data)
        hoje = datetime.now()
        datas = [
            hoje.strftime("%d-%m-%Y"),
            (hoje - timedelta(days=1)).strftime("%d-%m-%Y"),
            (hoje + timedelta(days=1)).strftime("%d-%m-%Y")
        ]
        
        print(f"   üìÖ DATAS AUTOM√ÅTICAS EXPANDIDAS: {datas}")
        return datas
    
    def _valor_no_nome_arquivo(self, arquivo: Path, valor: float) -> bool:
        """
        Verifica se o valor est√° no nome do arquivo
        """
        try:
            nome_sem_ext = arquivo.stem
            
            # Procura o valor formatado de diferentes formas
            valor_int = int(round(valor))
            patterns = [
                f"{valor:.2f}".replace('.', ','),  # 1234,56
                f"{valor:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.'),  # 1.234,56
                str(valor_int),  # Parte inteira
                f"{valor:.0f}",  # Sem decimais
            ]
            
            for pattern in patterns:
                if pattern in nome_sem_ext:
                    return True
            
            return False
        except:
            return False
    
    def _valor_no_conteudo_arquivo(self, arquivo: Path, valor: float, tolerancia: float = 0.10) -> bool:

        try:
            print(f"      üìñ LENDO CONTE√öDO COMPLETO DO ARQUIVO: {arquivo.name}")
            
            # Tenta ler TODAS as planilhas do arquivo
            try:
                planilhas = pd.read_excel(arquivo, sheet_name=None, engine='openpyxl')
                print(f"      üìä Total de planilhas: {len(planilhas)}")
            except Exception as e:
                print(f"      ‚ùå Erro ao ler todas as planilhas: {e}")
                # Se falhar, tenta ler apenas a primeira planilha
                try:
                    df = pd.read_excel(arquivo, engine='openpyxl')
                    planilhas = {'Sheet1': df}
                    print(f"      üìä Lida apenas a primeira planilha")
                except Exception as e2:
                    print(f"      ‚ùå‚ùå Erro cr√≠tico ao ler arquivo: {e2}")
                    return False
            
            # BUSCA AGUESSIVA: Procura em TODAS as c√©lulas de TODAS as planilhas
            for sheet_name, df in planilhas.items():
                if df.empty:
                    continue
                    
                print(f"      üîç Buscando na planilha '{sheet_name}': {df.shape[0]} linhas x {df.shape[1]} colunas")
                
                # Converte TODO o DataFrame para string para busca mais abrangente
                df_str = df.astype(str)
                
                # Procura o valor em TODAS as c√©lulas
                encontrou = False
                for col_idx, col_name in enumerate(df.columns):
                    for row_idx in range(len(df)):
                        valor_celula = df_str.iloc[row_idx, col_idx]
                        
                        # Pula c√©lulas vazias
                        if valor_celula in ['nan', 'None', 'NaT', '']:
                            continue
                        
                        # Tenta extrair n√∫meros da c√©lula
                        try:
                            # Remove caracteres n√£o num√©ricos (exceto ponto, v√≠rgula e sinal)
                            valor_limpo = re.sub(r'[^\d,\-\.]', '', valor_celula)
                            
                            if not valor_limpo:
                                continue
                                
                            # Converte para float
                            valor_float = self._converter_valor_para_float(valor_limpo)
                            
                            if valor_float is not None:
                                # Verifica se √© igual ao valor procurado (com toler√¢ncia)
                                if abs(valor_float - valor) <= tolerancia:
                                    print(f"      ‚úÖ‚úÖ‚úÖ VALOR ENCONTRADO!")
                                    print(f"         Planilha: {sheet_name}")
                                    print(f"         C√©lula: {col_name}[{row_idx + 2}]")  # +2 porque Excel come√ßa em 1 e tem header
                                    print(f"         Valor na c√©lula: {valor_celula}")
                                    print(f"         Valor convertido: {valor_float}")
                                    print(f"         Valor procurado: {valor}")
                                    return True
                        except:
                            continue
                
                # Tamb√©m procura o valor como string (formato brasileiro)
                for col_idx, col_name in enumerate(df.columns):
                    for row_idx in range(len(df)):
                        valor_celula = df_str.iloc[row_idx, col_idx]
                        
                        # Procura o valor formatado como string
                        valor_str_procurado = f"{valor:.2f}".replace('.', ',')  # 1234,56
                        if valor_str_procurado in valor_celula:
                            print(f"      ‚úÖ‚úÖ‚úÖ VALOR ENCONTRADO COMO STRING!")
                            print(f"         Planilha: {sheet_name}")
                            print(f"         C√©lula: {col_name}[{row_idx + 2}]")
                            print(f"         Conte√∫do: {valor_celula}")
                            print(f"         Padr√£o procurado: {valor_str_procurado}")
                            return True
            
            print(f"      ‚ùå Valor N√ÉO encontrado no arquivo")
            return False
            
        except Exception as e:
            print(f"      ‚ùå‚ùå ERRO NA BUSCA NO CONTE√öDO: {e}")
            return False
    
    def _extrair_chassi_do_relatorio(self, arquivo: Path, valor: float) -> Optional[str]:

        try:
            df = pd.read_excel(arquivo)
            
            # Estrat√©gia 1: Procurar coluna que contenha "chassi"
            for col in df.columns:
                if 'chassi' in str(col).lower():
                    # Retorna o primeiro chassi v√°lido encontrado
                    for chassi in df[col].dropna():
                        chassi_str = str(chassi).strip()
                        if len(chassi_str) == 17:  # Chassi normalmente tem 17 caracteres
                            print(f"      ‚úÖ Chassi encontrado na coluna '{col}': {chassi_str}")
                            return chassi_str
            
            # Estrat√©gia 2: Se n√£o encontrar coluna "chassi", usar l√≥gica espec√≠fica
            if len(df.columns) >= 8:
                # Supondo que o chassi est√° na coluna H (√≠ndice 7)
                coluna_chassi = df.columns[7]
                for chassi in df[coluna_chassi].dropna():
                    chassi_str = str(chassi).strip()
                    if len(chassi_str) == 17:
                        print(f"      ‚úÖ Chassi encontrado na coluna fixa H: {chassi_str}")
                        return chassi_str
            
            # Estrat√©gia 3: Procurar em qualquer coluna por valores que parecem chassis
            print(f"      üîç Procurando chassi em todas as colunas...")
            for col in df.columns:
                for valor_celula in df[col].dropna():
                    valor_str = str(valor_celula).strip()
                    # Verifica se parece um chassi (17 caracteres alfanum√©ricos)
                    if len(valor_str) == 17 and valor_str.isalnum():
                        print(f"      ‚úÖ Poss√≠vel chassi encontrado na coluna '{col}': {valor_str}")
                        return valor_str
            
            print(f"      ‚ùå Nenhum chassi v√°lido encontrado no arquivo")
            return None
            
        except Exception as e:
            print(f"‚ùå Erro ao extrair chassi: {e}")
            return None
    
    def _consultar_banco_dados(self, chassi: str, valor: float) -> Optional[ResultadoPan]:

        conn = None
        try:
            # Configura√ß√£o da conex√£o Oracle
            user_oracle = os.getenv('USER_ORACLE')
            password = os.getenv('PASSWORD_ORACLE')
            dsn = os.getenv('DSN')

            if not all([user_oracle, password, dsn]):
                print("‚ùå Vari√°veis de ambiente Oracle n√£o configuradas")
                return None

            # Estabelece conex√£o
            try:
                oracledb.init_oracle_client(lib_dir=r'C:\instantclient')
            except:
                pass  # Client j√° inicializado

            conn = oracledb.connect(
                user=user_oracle,
                password=password,
                dsn=dsn
            )

            cur = conn.cursor()

            # 1. Buscar cliente pelo chassi
            cur.execute(
                "SELECT CLIENTE FROM ofi_ficha_proprietario WHERE chassi = :chassi AND PROPRIETARIO_ATUAL = 'S'",
                {"chassi": chassi}
            )
            resultado_cliente = cur.fetchone()

            if not resultado_cliente:
                print(f"‚ùå Cliente n√£o encontrado para chassi: {chassi}")
                
                # TENTATIVA ALTERNATIVA: Buscar por qualquer propriet√°rio (n√£o s√≥ o atual)
                cur.execute(
                    "SELECT CLIENTE FROM ofi_ficha_proprietario WHERE chassi = :chassi",
                    {"chassi": chassi}
                )
                resultado_cliente = cur.fetchone()
                
                if not resultado_cliente:
                    print(f"‚ùå‚ùå Chassi n√£o encontrado em nenhum propriet√°rio: {chassi}")
                    return None
                
                print(f"‚ö†Ô∏è  Cliente encontrado (propriet√°rio n√£o atual): {resultado_cliente[0]}")

            cliente = resultado_cliente[0]
            print(f"‚úÖ Cliente encontrado: {cliente}")

            # 2. Buscar t√≠tulo/duplicata - ESTRAT√âGIA MELHORADA
            resultados_titulos = []
            
            # PRIMEIRO: Busca exata com duplicata diferente de '00'
            cur.execute(
                """SELECT TITULO, DUPLICATA, VAL_TITULO 
                FROM fin_titulo 
                WHERE CLIENTE = :cliente 
                AND TIPO = 'CR'
                AND ROUND(VAL_TITULO, 2) = ROUND(:valor, 2)
                AND DUPLICATA != '00'
                ORDER BY DUPLICATA""",
                {"cliente": cliente, "valor": valor}
            )
            resultados_titulos.extend(cur.fetchall())

            # SEGUNDO: Se n√£o encontrou, busca qualquer duplicata
            if not resultados_titulos:
                cur.execute(
                    """SELECT TITULO, DUPLICATA, VAL_TITULO 
                    FROM fin_titulo 
                    WHERE CLIENTE = :cliente 
                    AND ROUND(VAL_TITULO, 2) = ROUND(:valor, 2)
                    ORDER BY CASE WHEN DUPLICATA != '00' THEN 1 ELSE 2 END, DUPLICATA""",
                    {"cliente": cliente, "valor": valor}
                )
                resultados_titulos.extend(cur.fetchall())

            # TERCEIRO: Se ainda n√£o encontrou, busca com toler√¢ncia de 1 real
            if not resultados_titulos:
                cur.execute(
                    """SELECT TITULO, DUPLICATA, VAL_TITULO 
                    FROM fin_titulo 
                    WHERE CLIENTE = :cliente 
                    AND ABS(VAL_TITULO - :valor) <= 1.00
                    ORDER BY ABS(VAL_TITULO - :valor), 
                                CASE WHEN DUPLICATA != '00' THEN 1 ELSE 2 END, 
                                DUPLICATA""",
                    {"cliente": cliente, "valor": valor}
                )
                resultados_titulos.extend(cur.fetchall())

            # QUARTA: Se ainda n√£o encontrou, busca qualquer t√≠tulo do cliente (√∫ltimo recurso)
            if not resultados_titulos:
                cur.execute(
                    """SELECT TITULO, DUPLICATA, VAL_TITULO 
                    FROM fin_titulo 
                    WHERE CLIENTE = :cliente 
                    AND TIPO = 'CR'
                    ORDER BY DATA_EMISSAO DESC, 
                                CASE WHEN DUPLICATA != '00' THEN 1 ELSE 2 END
                    FETCH FIRST 1 ROWS ONLY""",
                    {"cliente": cliente}
                )
                resultados_titulos.extend(cur.fetchall())

            if resultados_titulos:
                # Pega o primeiro resultado (mais relevante)
                titulo, duplicata, val_titulo = resultados_titulos[0]
                
                # Log detalhado
                if len(resultados_titulos) > 1:
                    print(f"üìä M√∫ltiplos t√≠tulos encontrados ({len(resultados_titulos)}), usando o mais relevante")
                
                print(f"‚úÖ‚úÖ‚úÖ DADOS ENCONTRADOS NO BANCO: T√≠tulo {titulo}, Duplicata {duplicata}")
                return ResultadoPan(
                    titulo=str(titulo),
                    duplicata=str(duplicata),
                    valor=float(val_titulo)
                )

            print(f"‚ùå Nenhum t√≠tulo encontrado no banco para cliente {cliente}, valor {valor}")
            return None

        except Exception as e:
            print(f"‚ùå Erro na consulta ao banco: {e}")
            return None
        finally:
            if conn:
                conn.close()
    
    def _debug_conteudo_arquivo(self, arquivo: Path, max_linhas: int = 5):

        try:
            print(f"\n      üß™ DEBUG DO ARQUIVO: {arquivo.name}")
            planilhas = pd.read_excel(arquivo, sheet_name=None, engine='openpyxl')
            
            for sheet_name, df in planilhas.items():
                if df.empty:
                    print(f"         Planilha '{sheet_name}': VAZIA")
                    continue
                    
                print(f"         Planilha '{sheet_name}': {df.shape[0]} linhas x {df.shape[1]} colunas")
                print(f"         Colunas: {list(df.columns)}")
                
                # Mostra algumas linhas de dados
                for i in range(min(max_linhas, len(df))):
                    linha_str = " | ".join([str(df.iloc[i, j]) for j in range(min(5, len(df.columns)))])
                    print(f"         Linha {i+1}: {linha_str}")
                    
        except Exception as e:
            print(f"         ‚ùå Erro no debug: {e}")

    def processar_extrato_com_data(self, caminho_arquivo: str, data_busca: str) -> List[ResultadoPan]:
      
        try:
            print(f"\n" + "="*60)
            print(f"üîç INICIANDO PROCESSAMENTO DO EXTRATO PAN")
            print(f"üìÖ DATA ESPEC√çFICA: {data_busca}")
            print("="*60)
            
            # 1. Upload e leitura do arquivo
            df_extrato = self._ler_extrato_ita√∫(caminho_arquivo)
            
            # 2. Filtragem de lan√ßamentos relevantes
            valores_pan = self._filtrar_lancamentos_pan(df_extrato)
            
            if not valores_pan:
                print("‚ùå Nenhum lan√ßamento PAN encontrado no extrato")
                return []
            
            print(f"‚úÖ Valores PAN encontrados: {valores_pan}")
            
            # 3. Busca em diret√≥rio de rede COM DATA ESPEC√çFICA
            resultados = []
            
            for valor in valores_pan:
                print(f"\nüí∞ PROCESSANDO VALOR: R$ {valor:,.2f}")
                
                # Buscar o arquivo correspondente ao valor NA DATA ESPEC√çFICA
                arquivo_encontrado = self._buscar_arquivo_por_valor_com_data(valor, data_busca)
                
                if arquivo_encontrado:
                    # 4. Extra√ß√£o de informa√ß√µes do relat√≥rio
                    chassi = self._extrair_chassi_do_relatorio(arquivo_encontrado, valor)
                    
                    if chassi:
                        print(f"‚úÖ Chassi encontrado: {chassi}")
                        # Consulta no banco de dados
                        resultado_banco = self._consultar_banco_dados(chassi, valor)
                        
                        if resultado_banco:
                            resultados.append(resultado_banco)
                            print(f"‚úÖ‚úÖ‚úÖ VALOR PROCESSADO COM SUCESSO: R$ {valor:,.2f}")
                            print(f"   üìù Dados: T√≠tulo {resultado_banco.titulo}, Duplicata {resultado_banco.duplicata}")
                        else:
                            print(f"‚ö†Ô∏è  Dados n√£o encontrados no banco para chassi {chassi}")
                    else:
                        print(f"‚ö†Ô∏è  Chassi n√£o encontrado no relat√≥rio")
                else:
                    print(f"‚ùå Arquivo n√£o encontrado para o valor R$ {valor:,.2f} na data {data_busca}")

            # DEBUG FINAL
            print(f"\n" + "="*60)
            print("üîç DEBUG FINAL - TODOS OS RESULTADOS COLETADOS")
            print("="*60)
            print(f"üìä Total de valores PAN no extrato: {len(valores_pan)}")
            print(f"üìä Total de resultados processados: {len(resultados)}")
            
            for i, resultado in enumerate(resultados):
                print(f"   {i+1}. T√≠tulo: {resultado.titulo}, Duplicata: {resultado.duplicata}, Valor: R$ {resultado.valor:,.2f}")
            
            print(f"üìä RESULTADO FINAL: {len(resultados)} registros processados")
            return resultados
            
        except Exception as e:
            print(f"‚ùå ERRO NO PROCESSAMENTO: {e}")
            raise
    
    def _buscar_arquivo_por_valor_com_data(self, valor: float, data_busca: str) -> Optional[Path]:

        print(f"   üîç Buscando arquivo para R$ {valor:,.2f}")
        print(f"   üìÖ DATA ESPEC√çFICA: {data_busca}")
        
        pasta_data = Path(self.base_dir_rede) / data_busca
        
        if not pasta_data.exists():
            print(f"   ‚ùå Pasta n√£o existe: {data_busca}")
            return None
        
        print(f"   üìÇ Verificando pasta: {data_busca}")
        
        # Busca arquivos Excel na pasta
        arquivos = list(pasta_data.glob("*.xlsx")) + list(pasta_data.glob("*.xls"))
        arquivos = [arq for arq in arquivos if not arq.name.startswith('~$')]
        
        print(f"   üìÑ Arquivos encontrados: {len(arquivos)}")
        
        for arquivo in arquivos:
            print(f"      üîé Analisando: {arquivo.name}")
            
            # Verifica se o valor est√° no nome do arquivo
            if self._valor_no_nome_arquivo(arquivo, valor):
                print(f"      ‚úÖ ENCONTRADO no nome do arquivo!")
                return arquivo
            
            # Ou verifica se o valor est√° no conte√∫do do arquivo
            if self._valor_no_conteudo_arquivo(arquivo, valor):
                print(f"      ‚úÖ ENCONTRADO no conte√∫do do arquivo!")
                return arquivo
            
            print(f"      ‚ùå Valor n√£o encontrado em {arquivo.name}")
        
        print(f"   ‚ùå‚ùå‚ùå NENHUM ARQUIVO ENCONTRADO PARA R$ {valor:,.2f} na data {data_busca}")
        return None